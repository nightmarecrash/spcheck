{
  "_args": [
    [
      {
        "raw": "simple-blocks@github:lexich/simple-blocks",
        "scope": null,
        "escapedName": "simple-blocks",
        "name": "simple-blocks",
        "rawSpec": "github:lexich/simple-blocks",
        "spec": "github:lexich/simple-blocks",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:lexich/simple-blocks.git",
          "sshUrl": "git+ssh://git@github.com/lexich/simple-blocks.git",
          "httpsUrl": "git+https://github.com/lexich/simple-blocks.git",
          "gitUrl": "git://github.com/lexich/simple-blocks.git",
          "shortcut": "github:lexich/simple-blocks",
          "directUrl": "https://raw.githubusercontent.com/lexich/simple-blocks/master/package.json"
        }
      },
      "E:\\Repo"
    ]
  ],
  "_from": "lexich/simple-blocks",
  "_id": "simple-blocks@0.0.5",
  "_inCache": true,
  "_location": "/simple-blocks",
  "_phantomChildren": {},
  "_requested": {
    "raw": "simple-blocks@github:lexich/simple-blocks",
    "scope": null,
    "escapedName": "simple-blocks",
    "name": "simple-blocks",
    "rawSpec": "github:lexich/simple-blocks",
    "spec": "github:lexich/simple-blocks",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:lexich/simple-blocks.git",
      "sshUrl": "git+ssh://git@github.com/lexich/simple-blocks.git",
      "httpsUrl": "git+https://github.com/lexich/simple-blocks.git",
      "gitUrl": "git://github.com/lexich/simple-blocks.git",
      "shortcut": "github:lexich/simple-blocks",
      "directUrl": "https://raw.githubusercontent.com/lexich/simple-blocks/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/lexich/simple-blocks.git#639f140e75253f6c655b934b15103fcfe19ef7b7",
  "_shasum": "a8aef41f9a4cc496277e2b8f8762cffadea8aaf5",
  "_shrinkwrap": null,
  "_spec": "simple-blocks@github:lexich/simple-blocks",
  "_where": "E:\\Repo",
  "authors": [
    "Efremov Alexey <lexich121@gmail.com>"
  ],
  "dependencies": {
    "jquery": "^2.2.3"
  },
  "description": "Frontend components",
  "devDependencies": {
    "chai": "^1.9.2",
    "coffee-script": "^1.8.0",
    "coveralls": "^2.11.2",
    "gulp": "^3.8.9",
    "gulp-clean": "^0.3.1",
    "gulp-coffee": "^2.2.0",
    "gulp-sync": "^0.1.3",
    "gulp-util": "^3.0.1",
    "karma": "^0.12.24",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^0.1.5",
    "karma-coffee-preprocessor": "^0.2.1",
    "karma-coverage": "^0.2.6",
    "karma-mocha": "^0.1.9",
    "karma-phantomjs-launcher": "^0.1.4",
    "mocha": "^2.0.1",
    "through2": "^0.6.3",
    "yargs": "^1.3.2"
  },
  "gitHead": "639f140e75253f6c655b934b15103fcfe19ef7b7",
  "license": "MIT",
  "main": "dist/simpleblocks.js",
  "name": "simple-blocks",
  "optionalDependencies": {},
  "readme": "Simple blocks - Frontend blocks\r\n==========\r\n[![Build Status](https://travis-ci.org/lexich/simple-blocks.svg)](https://travis-ci.org/lexich/simple-blocks)\r\n[![Bower version](https://badge.fury.io/bo/simple-blocks.svg)](http://badge.fury.io/bo/simple-blocks)\r\n[![Coverage Status](https://coveralls.io/repos/lexich/simple-blocks/badge.png?branch=master)](https://coveralls.io/r/lexich/simple-blocks?branch=master)\r\n[![Dependency Status](https://david-dm.org/lexich/simple-blocks.svg)](https://david-dm.org/lexich/simple-blocks)\r\n[![devDependency Status](https://david-dm.org/lexich/simple-blocks/dev-status.svg)](https://david-dm.org/lexich/simple-blocks#info=devDependencies)\r\n### Description\r\nFComponent is a small arhitecture framework for creating litte\r\nsimple blocks. It may be usefull for simple integration to you\r\nMV* framework. For example backbone.\r\n\r\n### API\r\n#### `add(block, name)`  \r\nregister blocks  \r\n\r\n- `block` - Object of custom block definition. \r\n            Block must have `add` and `destroy` methods,\r\n            otherwise method `add` throws Error. You can also\r\n            define `name` of block or pass it as second \r\n            param.  \r\nType: Object {add:function(){}, destroy: function(){}}  \r\n- `name` - name of block  \r\nType: String  \r\nDefault: `block.name` \r\nExample:  \r\n```javascript\r\nvar sblocks = require(\"simple-blocks\")();\r\nsblocks.add({\r\n  init: function($el, message){\r\n    $el.html(\"<p>\" + message + \"</p>\");\r\n  },\r\n  destroy: function($el){\r\n    $el.empty();\r\n  }\r\n}, \"test\");\r\n```\r\n\r\n#### `init($root, arguments...)`  \r\nInitialize all register blocks in `$root` DOM element  \r\n- `$root` - dom element where find blocks  \r\nType: jQuery DOM object  \r\n- `arguments` - additional params for initialize block  \r\nExample:\r\n\r\nDefine block in html\r\n```html\r\n<body>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-test=\"Hello block\" />\r\n<div \r\n  data-sblock=\"test\" \r\n  data-test=\"Hello block\" />\r\n</body>\r\n```\r\n\r\nInitialize all blocks in body\r\n```javascript\r\nvar $ = require(\"jquery\");\r\nvar sblocks = require(\"simple-blocks\")();\r\nsblocks.init($(\"body\"));\r\n```\r\n\r\nResult html is:\r\n```html\r\n<body>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-sblock-test\r\n  data-test=\"Hello block\">\r\n  <p>Hello block</p>\r\n</div>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-sblock-test\r\n  data-test=\"Hello block2\">\r\n  <p>Hello block2</p>\r\n</div>\r\n</body>\r\n```\r\n\r\n### `item(name, $el, options, arguments...)`  \r\nMethod to init not marked html element as block  \r\n- `name` - name of using block  \r\n- `$el` - DOM element  \r\n- `options` - options for initialize block\r\n- `arguments` - additional params for initialize block  \r\nExample:  \r\n\r\n```javascript\r\nvar $ = require(\"jquery\");\r\nvar sblock = require(\"simple-blocks\")();\r\nvar $el = $('<div>');\r\n$(\"body\").append($el);\r\nsblock.item(\"test\", $el, \"Hello block 3\");\r\n```\r\n\r\nhtml dom result:\r\n```html\r\n<body>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-sblock-test\r\n  data-test=\"Hello block\">\r\n  <p>Hello block</p>\r\n</div>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-sblock-test\r\n  data-test=\"Hello block2\">\r\n  <p>Hello block2</p>\r\n</div>\r\n<div \r\n  data-sblock=\"test\" \r\n  data-sblock-test>\r\n  <p>Hello block3</p>\r\n</div>\r\n</body>\r\n```\r\n\r\n#### `destroy($root)`\r\nDestroy all initialize blocks in `$root` DOM element\r\n- `$root` - dom element where find blocks  \r\nType: jQuery DOM object  \r\nExample:  \r\n```javascript\r\nvar $ = require(\"jquery\");\r\nvar sblocks = require(\"simple-blocks\")();\r\nsblocks.destroy($(\"body\"));\r\n```\r\n\r\n#### `api(name, funcname, $el, args...)`  \r\nCall custom api for block\r\n- `name` - name of block  \r\n- `funcname` - name of callable function  \r\n- `$el` - element where find dom element for initialize blocks  \r\n- `arguments` - additional params  \r\nExample:\r\n```javascript\r\nsblocks.add({\r\n  init: function($el, val){\r\n    $el.text(val || 0)\r\n  },\r\n  destroy: function($el){\r\n    $el.empty();\r\n  },\r\n  api: {\r\n    val: function($el, val){\r\n      $el.text(val || 0);\r\n    }\r\n  }\r\n}, \"test\");\r\n/* after initializing apply method `api.val` to `$el` */\r\n$el.text() === \"0\"; //true\r\nsblocks.api(\"test\", \"val\", $el,  2);\r\n$el.text() === \"2\"; //true\r\n```  \r\n\r\nhtml dom result:\r\n```html\r\n<body>\r\n  <div \r\n  data-sblock=\"test\" \r\n  data-test=\"Hello block\"/>\r\n  <div \r\n    data-sblock=\"test\" \r\n    data-test=\"Hello block2\"/>\r\n  <div data-sblock=\"test\"/>\r\n</body>\r\n```\r\n\r\n### Example of Backbone integration\r\n```javascript\r\nView = Backbone.View.extend({\r\n  render: function(){\r\n    sblocks.init(this.$el);\r\n  },\r\n  remove: function(){\r\n    sblocks.destroy(this.$el);\r\n    Backbone.View.prototype.remove.call(this);\r\n  }\r\n});\r\n```\r\n### Changelog\r\n- 0.0.2 - bug fixing\r\n- 0.0.1 - public version\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "coveralls": "gulp test && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "test": "gulp test"
  },
  "version": "0.0.5"
}
