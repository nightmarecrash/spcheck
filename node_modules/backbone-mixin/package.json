{
  "_args": [
    [
      {
        "raw": "backbone-mixin@github:lexich/backbone-mixin",
        "scope": null,
        "escapedName": "backbone-mixin",
        "name": "backbone-mixin",
        "rawSpec": "github:lexich/backbone-mixin",
        "spec": "github:lexich/backbone-mixin",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:lexich/backbone-mixin.git",
          "sshUrl": "git+ssh://git@github.com/lexich/backbone-mixin.git",
          "httpsUrl": "git+https://github.com/lexich/backbone-mixin.git",
          "gitUrl": "git://github.com/lexich/backbone-mixin.git",
          "shortcut": "github:lexich/backbone-mixin",
          "directUrl": "https://raw.githubusercontent.com/lexich/backbone-mixin/master/package.json"
        }
      },
      "E:\\Repo"
    ]
  ],
  "_from": "lexich/backbone-mixin",
  "_id": "backbone-mixin@0.3.6",
  "_inCache": true,
  "_location": "/backbone-mixin",
  "_phantomChildren": {},
  "_requested": {
    "raw": "backbone-mixin@github:lexich/backbone-mixin",
    "scope": null,
    "escapedName": "backbone-mixin",
    "name": "backbone-mixin",
    "rawSpec": "github:lexich/backbone-mixin",
    "spec": "github:lexich/backbone-mixin",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:lexich/backbone-mixin.git",
      "sshUrl": "git+ssh://git@github.com/lexich/backbone-mixin.git",
      "httpsUrl": "git+https://github.com/lexich/backbone-mixin.git",
      "gitUrl": "git://github.com/lexich/backbone-mixin.git",
      "shortcut": "github:lexich/backbone-mixin",
      "directUrl": "https://raw.githubusercontent.com/lexich/backbone-mixin/master/package.json"
    }
  },
  "_requiredBy": [
    "/",
    "/sp-utils-bootstrapmodal"
  ],
  "_resolved": "git://github.com/lexich/backbone-mixin.git#1413fe5acf410e64ca96b97350fa1fce63c2561d",
  "_shasum": "719d6224cdb26f9bec0d5745ad1d78a59b4ad5c1",
  "_shrinkwrap": null,
  "_spec": "backbone-mixin@github:lexich/backbone-mixin",
  "_where": "E:\\Repo",
  "author": "",
  "dependencies": {},
  "description": "[docs](https://lexich.github.io/backbone-mixin/)",
  "devDependencies": {
    "coffee-script": "~1.7.1",
    "coveralls": "^2.11.2",
    "grunt": "~0.4.2",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-coffee": "~0.9.0",
    "grunt-contrib-uglify": "~0.3.2",
    "grunt-docco": "~0.3.3",
    "grunt-git-deploy": "~0.1.1",
    "grunt-karma": "~0.6.2",
    "grunt-rename": "~0.1.3",
    "grunt-version": "~0.3.0",
    "karma": "~0.10.9",
    "karma-chrome-launcher": "~0.1.2",
    "karma-coverage": "^0.2.6",
    "karma-firefox-launcher": "~0.1.3",
    "karma-html2js-preprocessor": "~0.1.0",
    "karma-jasmine": "~0.1.5",
    "karma-phantomjs-launcher": "~0.1.1",
    "karma-script-launcher": "~0.1.0"
  },
  "gitHead": "1413fe5acf410e64ca96b97350fa1fce63c2561d",
  "license": "MIT",
  "main": "index.js",
  "name": "backbone-mixin",
  "optionalDependencies": {},
  "readme": "[docs](https://lexich.github.io/backbone-mixin/)\r\n\r\n[![Build Status](https://travis-ci.org/lexich/backbone-mixin.png?branch=master)](https://travis-ci.org/lexich/backbone-mixin)\r\n[![Bower version](https://badge.fury.io/bo/backbone-mixin.svg)](http://badge.fury.io/bo/backbone-mixin)\r\n[![Coverage Status](https://coveralls.io/repos/lexich/backbone-mixin/badge.png?branch=master)](https://coveralls.io/r/lexich/backbone-mixin?branch=master)\r\n# Description\r\nMixin for extend [Backbone.View](http://backbonejs.org/#View) or [Backbone.Epoxy.View](http://epoxyjs.org/documentation.html#view)  \r\nInspired by [Chalin](chaplinjs.org) and [Marionette](http://marionettejs.com/)  \r\nIt's not a framework, it's little mixin-helper for great arhitecture.\r\n\r\n# Instalation\r\n```\r\nbower install backbone-mixin --save\r\n```\r\n\r\n#### ui  \r\nType `Object`  \r\nSyntax sugar, define map of children dom elements.\r\n```js\r\n{\r\n  ui: {\r\n    test: \".container .test\"  //definition\r\n  },\r\n  events: {\r\n    \"click @ui.test\": \"on_click_test\" //using in event binding\r\n  },\r\n  bindings: {\r\n    \"@ui.test\": \"text:value\" //using in Epoxy bindings http://epoxyjs.org/tutorials.html#simple-bindings\r\n  },\r\n  render: function(){\r\n    this.ui.test.show(); //direct using\r\n  }\r\n}\r\n```\r\n\r\n#### template\r\nType `String`\r\nDirect loading html template from DOM to current element (this.el)\r\n```js\r\n{\r\n  template: \"#Template\"  \r\n}\r\n\r\n```\r\n```html\r\n<script id=\"Template\" type=\"template/text\">\r\n<p>Template content</p>\r\n</script>\r\n```\r\n\r\n#### templateFunc\r\nType `Function`\r\nFunction for process `template`. For expample you can use underscore template engine of handlebars etc.\r\n```js\r\ntemplateFunc: function(template,data){\r\n  return _.template(template,data);\r\n}\r\n```\r\n\r\n#### templateData\r\nType `Object` or `Function`\r\nData for template processing. If templateFunc isn't define and templateData define, then templateFunc use underscore template engine.\r\n\r\n#### regions\r\nType `Object`\r\nSugar syntax for bingins subview. `regions` can be used for gluing current view with multiple other views\r\n```js\r\nregions: {\r\n  hello: \".hello_selector\"  \r\n},\r\nrender: function(){\r\n  //this.r.hello is BackboneMixin(Backbone.View) instance\r\n  this.r.hello.show(CustomBackboneView); \r\n  //now instance of CustomBackboneVIew is subview of this.hello view\r\n}\r\n```\r\nAlso regions can use for point to point view bindings\r\n\r\n```js\r\nregions: {\r\n  hello: {\r\n    el: \".hello_selector\",\r\n    view: (HelloView = MixinBackbone(Backbone.View).extend({}))\r\n  }\r\n},\r\nrender: function(){\r\n  this.r.hello.$el === this.$el.find(\".hello_selector\");\r\n}\r\n```\r\nwhen view render with \"show\" mechanizm then all regions call render\r\n\r\nbefore version 0.3.0 regions load to `this` scope after they load in `this.r` scope. For compatible with old code you can use `__oldmode__` flag. And `__oldmode__` can't be name of region\r\n\r\n```js\r\nregions: {\r\n  __oldmode__: true,\r\n  hello: \".hello_selector\"\r\n},\r\nrender: function(){\r\n  this.r.hello === this.hello;\r\n}\r\n```\r\n\r\nAlso you can use `regions` and `ui` together\r\n```js\r\nui: {\r\n  test: \".test\"\r\n}\r\nregions: {\r\n  test: {\r\n    el: \"@ui.test\",\r\n    view: (HelloView = MixinBackbone(Backbone.View).extend({}))\r\n  }\r\n}\r\n```\r\n\r\nUsing scope functionality\r\n```js\r\nregions: {\r\n  test: {\r\n  \tel: \".test\",\r\n  \tview: (HelloView = MixinBackbone(Backbone.View).extend({\r\n\t  initialize: function(options){\r\n\t    options.test === \"test value\";\r\n\t    this.model !== null;\r\n\t  }\r\n\t}\r\n  \t})),\r\n  \tscope: function(){\r\n\t\t//this context is context of view\r\n\t\tthis.model !== null;\r\n\t\tthis.collection === null; //initialize calls after scope\r\n\t\treturn {\r\n\t\t\tmodel: this.model,\r\n\t\t\ttest: \"test value\"\r\n\t\t};\r\n  \t}\r\n  }\r\n},\r\nscope: function(){\r\n\tthis.model = new TestModel();\r\n},\r\ninitialize: function(){\r\n\tthis.collection = new TestCollection();\r\n}\r\n\r\n```\r\n\r\n#### show(view,options)\r\nType `Function`\r\nShow view in current view. Very usefull for regions. This method append `view.el` to `this.el` and call helper method `this.showViewAnimation`\r\n\r\n#### close(view)\r\nType `Function`\r\nClose view which was opened in current view. This method not call `this.remove` by default, but call helper method `this.closeViewAnimation`\r\n\r\n### setNeedRerenderView(view)\r\nType `Function`\r\n`show` mechanizm call `view.render` function only while first calling. `setNeedRerenderView` forse call `view.render` function once again\r\n\r\n#### setNeedRerender \r\nType `Function`\r\nAlias setNeedRerenderView(this)\r\n\r\n#### showViewAnimation(view)\r\nType `Function`\r\nHelper method which can descride animation/behavior for `view` while base view `show` `view`. By default using `view.$el.show()`\r\n\r\n#### showAnimation\r\nType `Function`\r\nAlias showViewAnimation(this)\r\n\r\n#### closeViewAnimation(view)\r\nType `Function`\r\nHelper method which can descride animation/behavior for `view` while base view `close` `view`. By default using `view.$el.show()`\r\n\r\n#### closeAnimation\r\nType `Function`\r\nAlias closeViewAnimation(this)\r\n\r\n#### getViewDI(ViewParams, options)\r\nType `Function`\r\nDepedencies Injection functionality\r\n`options` - options for `new View(options)`  operations\r\n`ViewParams`\r\n  - type `Backbone.View` - if you use this View only once in ypu application\r\n  - type `instance Backbone.View` - if you save instance ny ViewParams.cid\r\n  - type `object` - usefull for multiple using Views\r\n    - type: `Backbone.View` - View prototype\r\n    - key: `String` - key for different instace\r\n\r\n#### onShow\r\nType `Function`\r\ncallback caller,  execute when view base view `show` this view\r\n\r\n#### onClose\r\nType `Function`\r\ncallback caller, execute when view base view `close` this view\r\n\r\n#Run tests\r\n```bash\r\nnpm install\r\nbower install\r\ngrunt karma:dist\r\n```\r\n\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/lexich/backbone-mixin/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "coveralls": "karma start karma.conf.js --single-run && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "test": "karma start karma.conf.js --single-run"
  },
  "version": "0.3.6"
}
